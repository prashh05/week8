import React from "react";
import { Button, Form, Badge, Card, Spinner, Modal } from "react-bootstrap";
import "./App.css";

class App extends React.Component {
  constructor(props) {
    super(props);
    console.log("constructor: Component is being constructed");

    this.state = {
      tasks: [
        { id: 1, title: "Complete React Assignment", priority: "High", completed: false, createdAt: Date.now() },
        { id: 2, title: "Review Bootstrap Documentation", priority: "Medium", completed: true, createdAt: Date.now() },
        { id: 3, title: "Debug Lifecycle Methods", priority: "High", completed: false, createdAt: Date.now() },
        { id: 4, title: "Setup React Dev Tools", priority: "Low", completed: false, createdAt: Date.now() },
      ],
      filter: "All",
      isLoading: true,
      mountTime: null,
      newTaskTitle: "",
      newTaskPriority: "High",
      isModalOpen: false,
    };

    this.handleFilterChange = this.handleFilterChange.bind(this);
    this.handleTaskToggle = this.handleTaskToggle.bind(this);
    this.handleDeleteTask = this.handleDeleteTask.bind(this);
    this.handleAddTask = this.handleAddTask.bind(this);
    this.toggleModal = this.toggleModal.bind(this);
  }

  componentDidMount() {
    console.log("componentDidMount: Component has mounted");
    this.setState({ mountTime: new Date().toLocaleString() });

    this.timer = setTimeout(() => {
      this.setState({ isLoading: false });
      console.log("Simulated API call complete — loading finished");
    }, 1000);
  }

  componentDidUpdate(prevProps, prevState) {
    if (prevState.tasks.length !== this.state.tasks.length) {
      console.log(`Tasks changed: ${prevState.tasks.length} → ${this.state.tasks.length}`);
    }

    if (prevState.filter !== this.state.filter) {
      console.log(`Filter changed: ${prevState.filter} → ${this.state.filter}`);
    }
  }

  componentWillUnmount() {
    console.log("componentWillUnmount: Cleaning up resources...");
    if (this.timer) clearTimeout(this.timer);
  }

  handleFilterChange(filterType) {
    this.setState({ filter: filterType });
  }

  handleTaskToggle(taskId) {
    this.setState((prevState) => ({
      tasks: prevState.tasks.map((task) =>
        task.id === taskId ? { ...task, completed: !task.completed } : task
      ),
    }));
  }

  handleDeleteTask(taskId) {
    this.setState((prevState) => ({
      tasks: prevState.tasks.filter((task) => task.id !== taskId),
    }));
  }

  handleAddTask(e) {
    e.preventDefault();
    const { newTaskTitle, newTaskPriority } = this.state;
    if (!newTaskTitle.trim()) return;

    const newTask = {
      id: Date.now(),
      title: newTaskTitle.trim(),
      priority: newTaskPriority,
      completed: false,
      createdAt: Date.now(),
    };

    this.setState((prevState) => ({
      tasks: [...prevState.tasks, newTask],
      newTaskTitle: "",
      newTaskPriority: "High",
      isModalOpen: false,
    }));
  }

  toggleModal() {
    this.setState((prevState) => ({
      isModalOpen: !prevState.isModalOpen,
    }));
  }

  getPriorityBadge(priority) {
    switch (priority) {
      case "High":
        return "danger";
      case "Medium":
        return "warning";
      case "Low":
        return "success";
      default:
        return "info";
    }
  }

  render() {
    const { tasks, filter, isLoading, isModalOpen, newTaskTitle, newTaskPriority } = this.state;

    if (isLoading) {
      return (
        <div data-testid="loading" className="d-flex justify-content-center align-items-center vh-100">
          <Spinner animation="border" role="status">
            <span className="visually-hidden">Loading...</span>
          </Spinner>
        </div>
      );
    }

    const filteredTasks = tasks.filter((task) => {
      if (filter === "Completed") return task.completed;
      if (filter === "All") return true;
      return task.priority === filter;
    });

    return (
      <div className="app-container">
        <nav className="navbar navbar-dark bg-dark">
          <div className="container-fluid">
            <span className="navbar-brand mb-0 h1">Task Manager</span>
            <Button variant="primary" onClick={this.toggleModal}>
              Add New Task
            </Button>
          </div>
        </nav>

        <div className="container mt-4">
          <div className="btn-group mb-3" role="group" aria-label="Filter Tasks">
            {["All", "High", "Medium", "Low", "Completed"].map((f) => (
              <Button
                key={f}
                variant={filter === f ? "primary" : "outline-primary"}
                onClick={() => this.handleFilterChange(f)}
              >
                {f}
              </Button>
            ))}
          </div>

          <div className="row">
            {filteredTasks.length > 0 ? (
              filteredTasks.map((task) => (
                <div key={task.id} className="col-md-6 mb-3">
                  <Card className="shadow-sm">
                    <Card.Body>
                      <div className="d-flex justify-content-between align-items-start">
                        <Form.Check
                          type="checkbox"
                          checked={task.completed}
                          onChange={() => this.handleTaskToggle(task.id)}
                          label={
                            <span className={task.completed ? "text-decoration-line-through" : ""}>
                              {task.title}
                            </span>
                          }
                        />
                        <Badge variant={this.getPriorityBadge(task.priority)}>
                          {task.priority}
                        </Badge>
                      </div>
                      <Button
                        variant="danger"
                        size="sm"
                        className="mt-3"
                        onClick={() => this.handleDeleteTask(task.id)}
                      >
                        Delete
                      </Button>
                    </Card.Body>
                  </Card>
                </div>
              ))
            ) : (
              <p className="text-center">No tasks to display for this filter.</p>
            )}
          </div>
        </div>

        <Modal show={isModalOpen} onHide={this.toggleModal}>
          <Modal.Header closeButton>
            <Modal.Title>Add New Task</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form onSubmit={this.handleAddTask}>
              <Form.Group className="mb-3">
                <Form.Label>Task Title</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="Enter task title..."
                  value={newTaskTitle}
                  onChange={(e) => this.setState({ newTaskTitle: e.target.value })}
                  required
                />
              </Form.Group>

              <Form.Group className="mb-3">
                <Form.Label>Priority</Form.Label>
                <Form.Select
                  value={newTaskPriority}
                  onChange={(e) => this.setState({ newTaskPriority: e.target.value })}
                >
                  <option>High</option>
                  <option>Medium</option>
                  <option>Low</option>
                </Form.Select>
              </Form.Group>

              <div className="text-end">
                <Button variant="secondary" onClick={this.toggleModal} className="me-2">
                  Cancel
                </Button>
                <Button variant="primary" type="submit">
                  Add Task
                </Button>
              </div>
            </Form>
          </Modal.Body>
        </Modal>
      </div>
    );
  }
}

export default App;
